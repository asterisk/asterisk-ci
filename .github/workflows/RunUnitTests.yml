name: RunUnitTests
run-name: ${{ github.event.client_payload.sender.login }} has triggered a run of Asterisk Unit Tests
on:
  workflow_call:
    inputs:
      pr-number:
        required: true
        type: number
      pr-repo:
        required: true
        type: string
#    secrets:
#      ASTERISKTEAM_CI_PAT:
#        required: true
#    
env:
  UNITTEST_COMMAND: "test execute category /main/json/"

jobs:
  AsteriskUnitTests:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/asterisk/asteriskci-agent-rocky8:latest

    steps:
      - name: Checkout Asterisk CI
        uses: actions/checkout@v3
        with:
          repository: 'asterisk/asterisk-ci'
          ref: main
          path: 'asterisk-ci'
          clean: true
          fetch-depth: 1
          set-safe-directory: true
    
      - name: Setup Environment
        env:
          PR_NUMBER: ${{ inputs.pr-number }}
          PR_REF: refs/pull/${{ inputs.pr-number }}/head
          PR_REPO: ${{ inputs.pr-repo }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "PWD: $PWD"
          source ./asterisk-ci/ci-scripts/setup_unit_test_environment.sh

      - name: Checkout Asterisk
        uses: actions/checkout@v3
        with:
          repository: ${{ env.PR_REPO }}
          ref: ${{ env.PR_REF }}
          path: ${{ env.REPO_DIR }}
          clean: true
          fetch-depth: 1
          set-safe-directory: true

      - name: Setup Asterisk Build Environment
        run: |
          echo $PWD
          ls -al
          cd $REPO_DIR
          echo "::notice::PWD: $PWD"
          echo "::notice::$(git log -5 --format='%h %an %ai %s')"
          mkdir -p /srv/cache/externals /srv/cache/sounds /srv/cache/ccache || :
          chown -R asteriskci:users /srv/cache
          chmod g+rw /srv/cache/ccache
          chmod g+s /srv/cache/ccache
          mkdir -p tests/CI/output || :
          chown -R asteriskci:users tests/CI/output

#      - name: Build Asterisk
#        run: |
#          cd $REPO_DIR
#          if [ -f ./tests/CI/output/is-built ] ; then
#            echo "Asterisk is already built"
#            exit 0
#          fi
#          ./tests/CI/buildAsterisk.sh --github --branch-name=master --output-dir=./tests/CI/output
#          touch ./tests/CI/output/is-built
#
#      - name: Install Asterisk
#        if: ${{ success() }}
#        run: |
#          cd $REPO_DIR
#          if [ -f ./tests/CI/output/is-installed ] ; then
#            echo "Asterisk is already installed"
#            exit 0
#          fi
#          ./tests/CI/installAsterisk.sh --github --uninstall-all --branch-name=master --user-group=asteriskci:users 
#          touch ./tests/CI/output/is-installed
#
#      - name: Run Unit Tests
#        if: ${{ success() }}
#        run: |
#          cd $REPO_DIR
#          echo "::notice::Running unit test command $UNITTEST_COMMAND"
#          tests/CI/runUnittests.sh --no-expect --github \
#            --user-group=asteriskci:users \
#            --output-dir=./tests/CI/output \
#            --output-xml=./tests/CI/output/unittests-results.xml \
#            --unittest-command="$UNITTEST_COMMAND"

      - name: Run Unit Tests
        run: |
          cd $REPO_DIR
          echo "::notice::Running unit test command $UNITTEST_COMMAND"
          mkdir -p tests/CI/output
          cat > tests/CI/output/unittest-result.xml <<EOF 
          <?xml version="1.0" encoding="UTF-8"?>
          <testsuites>
          	<testsuite errors="0" time="0.0" tests="693" name="AsteriskUnitTests">
          		<properties>
          			<property name="version" value="GIT-master-506e84e2c2M"/>
          		</properties>
          		<testcase time="0.0" classname="TEST_PASS_FAIL" name="JUST_PASS"/>
          		<testcase time="0.0" classname="TEST_PASS_FAIL" name="JUST_FAIL">
          			<failure><![CDATA[
          [test_pbx.c:just_fail:400]: This test just forces a fail
          
          		]]></failure>
          		</testcase>
          	</testsuite>
          </testsuites>
          EOF
          
      - name: Save Output
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: Test Results
          path: $REPO_DIR/tests/CI/output

      # We need to save the event payload to the artifacts so
      # the publish test results workflow knows which PR to put the
      # results
#      - name: Save Event Payload
#        uses: actions/upload-artifact@v3
#        with:
#          name: Event File
#          path: ${{ github.event_path }}

      - name: Get Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{ secrets.ASTERISK_ORG_ACCESS_APP_ID }}
          application_private_key: ${{ secrets.ASTERISK_ORG_ACCESS_APP_PRIV_KEY }}

      - name: Publish Test Results
        uses: /asterisk/asterisk-ci-actions/publish-unit-test-result-action/composite@main
        with:
          github_token: ${{ steps.get_workflow_token.outputs.token }}
          event_file: pr_event.json
#          commit: ${{ env.PR_SHA }}
#          repository: ${{ env.PR_REPO }}
          files: ${{env.REPO_DIR}}/tests/CI/output/*.xml
