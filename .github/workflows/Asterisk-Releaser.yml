name: Asterisk Release
run-name: ${{ github.actor }} is creating an Asterisk release
on:
  workflow_dispatch:
    inputs:
      is_certified:
        description: 'Certified?'
        required: true
        type: boolean
        default: false
      is_security:
        description: 'Security or Hotfix?'
        required: true
        type: boolean
        default: false
      new_version:
        description: 'New Version (I.E. 21.4.0 or 21.4-cert2'
        required: true
        type: string
      new_release_type:
        description: 'New Release Type'
        required: true
        type: choice
        options:
        - 'ga'
        - 'rc1'
        - 'rc2'
        - 'rc3'
        - 'rc4'
        - 'rc5'
        - 'rc6'
        - 'rc7'
        - 'rc8'
        - 'pre1'
        default: ga
      start_version:
        description: 'Last Version (special cases only)'
        required: false
        type: string
      start_release_type:
        description: 'Last Release Type (special cases only)'
        required: false
        type: choice
        options:
        - 'ga'
        - 'rc1'
        - 'rc2'
        - 'rc3'
        - 'rc4'
        - 'rc5'
        - 'rc6'
        - 'rc7'
        - 'rc8'
        - 'pre1'
        default: ga

jobs:
  TestRelease:
    runs-on: ubuntu-latest
    steps:
      - name: Basic Setup
        run: |
          apt update -y &>/dev/null || apt update -y 
          apt install -y jq rsync git gh &>/dev/null || apt install -y jq rsync git gh 
          git config --global user.email "asteriskteam@digium.com"
          git config --global user.name "Asterisk Development Team"
          gh auth setup-git -h github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.ASTDEV_GPG_PRIV_KEY }}

      - name: Checkout Asterisk CI (local testing)
        if: env.ACT && env.ASTERISK_CI_URL != ''
        run: |
          rm -rf ./asterisk-ci/ &>/dev/null || :
          rsync -aH ${ASTERISK_CI_URL}/. ./asterisk-ci/
          git config --global --add safe.directory ${PWD}/asterisk-ci

      - name: Checkout Asterisk CI
        if: ${{ !env.ACT }}
        uses: actions/checkout@v3
        with:
          repository: 'asterisk/asterisk-ci'
          ref: main
          # Relative path under $GITHUB_WORKSPACE to place the repository
          path: 'asterisk-ci'
          # Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
          # Default: true
          clean: true
          fetch-depth: 1
          # Add repository path as safe.directory for Git global config by running `git
          # config --global --add safe.directory <path>`
          # Default: true
          set-safe-directory: true

      - name: Assemble Version Strings
        run: |
          echo "::notice::${{ toJSON(inputs) }}"

          SECURITY=${{ inputs.is_security }}
          echo "SECURITY=${SECURITY}" >> $GITHUB_ENV
          CERTIFIED=${{ inputs.is_certified }}
          echo "CERTIFIED=${CERTIFIED}" >> $GITHUB_ENV
          
          if [ "${{ inputs.new_version }}" == "" ] ; then
            echo "::error::You must supply a new version"
            exit 1
          fi

          end_tag=""
          ${CERTIFIED} && end_tag+="certified/"
          end_tag+=${{ inputs.new_version }}
          if [ "${{ inputs.new_release_type }}" != "ga" ] ; then
            if [[ ${{ inputs.new_release_type }} =~ (rc[0-9]|pre1) ]] ; then
              end_tag+="-${BASH_REMATCH[1]}"
            else
              echo "::error::Release type '${{ inputs.new_release_type }}' is malformed"
              exit 1
            fi
          fi
          echo "::notice::End tag: ${end_tag}"
          echo "end_tag=${end_tag}" >> $GITHUB_ENV

          if [ "${{ inputs.start_version }}" != "" ] ; then
            start_tag=""
            ${CERTIFIED} && start_tag+="certified/"
            start_tag+=${{ inputs.start_version }}
            [[ "${{ inputs.start_release_type }}" =~ (rc[0-9]|pre) ]] && start_tag+="-${BASH_REMATCH[1]}"
            echo "::notice::Start tag: ${start_tag}"
            echo "start_tag=${start_tag}" >> $GITHUB_ENV
          fi

          ./asterisk-ci/scripts/version_validator.sh \
            $( $SECURITY && echo "--security") \
            $( $CERTIFIED && echo "--certified") \
            ${start_tag:+--start-tag=${start_tag}} --end-tag=${end_tag}

      - name: Python and Alembic Setup
        run: |
          apt install -y python3.11 python3-pip &>/dev/null || apt install -y python3.11 python3-pip
          echo "::group::Install Pip" 
          pip install alembic &>/dev/null || pip install alembic 
          echo "::endgroup::" 

      - name: Checkout Asterisk (local testing)
        if: env.ACT && env.ASTERISK_URL != ''
        run: |
          rm -rf ./asterisk &>/dev/null || :
          rsync -aH ${ASTERISK_URL}/. ./asterisk/
          git config --global --add safe.directory ${PWD}/asterisk

      - name: Checkout Asterisk
        if: ${{ !env.ACT }}
        uses: actions/checkout@v3
        with:
          repository: 'asterisk/asterisk'
          ref: ${{ inputs.branch }}
          # Relative path under $GITHUB_WORKSPACE to place the repository
          path: 'asterisk'
          # Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
          # Default: true
          clean: true
          fetch-depth: 1
          # Add repository path as safe.directory for Git global config by running `git
          # config --global --add safe.directory <path>`
          # Default: true
          set-safe-directory: true

      - name: Validate Version Strings
        run: |
          ./asterisk-ci/scripts/get_start_tag.sh \
            --save-github-env \
            --src-repo=./asterisk/ \
            $( $SECURITY && echo "--security") \
            $( $CERTIFIED && echo "--certified") \
            ${start_tag:+--start-tag=${start_tag}} --end-tag=${end_tag}

      - name: Release
        run: |
          echo "::notice::Start Tag: ${start_tag}"
          echo "::notice::End Tag:   ${end_tag}"
          dest_dir=./asterisk-${end_tag}
          echo "::notice::PWD:     $PWD"
          echo "::notice::DST-DIR: ${dest_dir}"
          rm -rf ${dest_dir} &>/dev/null || :
          mkdir ${dest_dir}

          ./asterisk-ci/scripts/create_release_artifacts.sh \
            --src-repo=./asterisk/ --dst-dir=${dest_dir} --debug \
            $( $SECURITY && echo "--security") \
            $( $CERTIFIED && echo "--certified") \
            --start-tag=${start_tag} --end-tag=${end_tag} \
            --cherry-pick --alembic --changelog --commit --tag \
            --push --tarball --patchfile --sign --push-live
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dump Environment
        run: |
          echo "::group::Environment"
          echo "::debug::${{ toJSON(env) }}"
          dir ./asterisk-${end_tag}/
          echo "::endgroup::"


