# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Asterisk Release
run-name: ${{ github.actor }} is creating an Asterisk release
on:
  workflow_dispatch:
    inputs:
      is_security:
        description: 'Security or Hotfix?'
        required: true
        type: boolean
        default: false
      new_version:
        description: |
          New Version
          Examples:
            21.4.0-rc1
            21.4.0-rc2
            21.4.0
            21.4.1
            certified/21.4-cert1-rc1
            certified/21.4-cert1
        required: true
        type: string
      start_version:
        description: |
          Last Version
          Only use when you KNOW that the automated
          process won't get it right.' 
        required: false
        type: string

jobs:
  ReleaseAsterisk:
    runs-on: ubuntu-latest
    steps:
      - name: Setup for PROD
        run: |
          echo "ASTERISK_MAIL_LIST_GA=${{ vars.ASTERISK_MAIL_LIST_GA }}" >> $GITHUB_ENV
          echo "ASTERISK_MAIL_LIST_RC=${{ vars.ASTERISK_MAIL_LIST_RC }}" >> $GITHUB_ENV
          echo "ASTERISK_MAIL_LIST_CERT_GA=${{ vars.ASTERISK_MAIL_LIST_CERT_GA }}" >> $GITHUB_ENV
          echo "ASTERISK_MAIL_LIST_CERT_RC=${{ vars.ASTERISK_MAIL_LIST_CERT_RC }}" >> $GITHUB_ENV
          echo "ASTERISK_MAIL_LIST_SEC=${{ vars.ASTERISK_MAIL_LIST_CERT_SEC }}" >> $GITHUB_ENV

      - name: Basic Setup
        run: |
          sudo apt update -y &>/dev/null || apt update -y 
          sudo apt install -y jq rsync git gh &>/dev/null || apt install -y jq rsync git gh 
          git config --global user.email "asteriskteam@digium.com"
          git config --global user.name "Asterisk Development Team"

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.ASTDEV_GPG_PRIV_KEY }}

      - name: Checkout Asterisk CI
        uses: actions/checkout@v3
        with:
          repository: 'asterisk/asterisk-ci'
          ref: main
          # Relative path under $GITHUB_WORKSPACE to place the repository
          path: 'asterisk-ci'
          # Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
          # Default: true
          clean: true
          fetch-depth: 1
          # Add repository path as safe.directory for Git global config by running `git
          # config --global --add safe.directory <path>`
          # Default: true
          set-safe-directory: true

        # This step takes the input arguments and does some
        # basic validation.
      - name: Assemble Version Strings
        run: |
          echo "::notice::${{ toJSON(inputs) }}"

          SECURITY=${{ inputs.is_security }}
          echo "SECURITY=${SECURITY}" >> $GITHUB_ENV
          
          if [ "${{ inputs.new_version }}" == "" ] ; then
            echo "::error::You must supply a new version"
            exit 1
          fi

          end_tag="${{ inputs.new_version }}"
          start_tag="${{ inputs.start_version }}"

          ./asterisk-ci/scripts/version_validator.sh \
            $( $SECURITY && echo "--security") \
            ${start_tag:+--start-tag=${start_tag}} --end-tag=${end_tag} \
            --save-github-env

          if [ -n "${start_tag}" ] ; then
            echo "::notice::Start tag: ${start_tag}"
            echo "start_tag=${start_tag}" >> $GITHUB_ENV
          fi

          echo "::notice::End tag: ${end_tag}"
          echo "end_tag=${end_tag}" >> $GITHUB_ENV

        # We need python and alembic to create the alembic
        # SQL scripts that go in the tarball.
      - name: Python and Alembic Setup
        run: |
          sudo apt install -y python3.11 python3-pip &>/dev/null || apt install -y python3.11 python3-pip
          echo "::group::Install Pip" 
          sudo pip install alembic &>/dev/null || pip install alembic 
          echo "::endgroup::" 

      - name: Checkout Asterisk
        uses: actions/checkout@v3
        with:
          repository: ${{ vars.ASTERISK_REPO }}
          # Relative path under $GITHUB_WORKSPACE to place the repository
          path: 'asterisk'
          # Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
          # Default: true
          clean: true
          fetch-depth: 1
          # Add repository path as safe.directory for Git global config by running `git
          # config --global --add safe.directory <path>`
          # Default: true
          set-safe-directory: true

        # Examine the asterisk tag history to get the
        # proper start tag based on the end tag specified
        # in the input form.  The start tag is saved into the
        # environment as "start_tag".
      - name: Validate Version Strings
        run: |
          git -C ./asterisk/ fetch
          ./asterisk-ci/scripts/get_start_tag.sh \
            --save-github-env --debug \
            --src-repo=./asterisk/ \
            $( $SECURITY && echo "--security") \
            ${start_tag:+--start-tag=${start_tag}} --end-tag=${end_tag}

      - name: Get Token needed to add reviewers
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{secrets.ASTERISK_ORG_ACCESS_APP_ID}}
          application_private_key: ${{secrets.ASTERISK_ORG_ACCESS_APP_PRIV_KEY}}
          organization: asterisk

        # This is it.  Do the release.
        # The GITHUB_TOKEN is required because we have to push
        # commits and tags, create a release, label issues,
        # and attach the tarball, changelog and signatures to the
        # release.
      - name: Release
        env:
          GITHUB_TOKEN: ${{steps.get_workflow_token.outputs.token}}
          GH_TOKEN: ${{steps.get_workflow_token.outputs.token}}
        run: |
          source ./asterisk-ci/scripts/common.sh

          declare -A start_tag_array
          tag_parser ${start_tag} start_tag_array
          declare -p start_tag_array

          declare -A end_tag_array
          tag_parser ${end_tag} end_tag_array
          declare -p end_tag_array

          export GH_TOKEN
          export GITHUB_TOKEN

          gh auth setup-git -h github.com
          SRC_REPO=./asterisk/
          git -C "${SRC_REPO}" checkout ${end_tag_array[source_branch]}
          git -C "${SRC_REPO}" pull
          git -C "${SRC_REPO}" checkout ${end_tag_array[branch]}
          git -C "${SRC_REPO}" pull

          echo "::notice::Start Tag: ${start_tag}"
          echo "::notice::End Tag:   ${end_tag}"
          dest_dir=./asterisk-${end_tag}
          echo "dest_dir=${dest_dir}" >> $GITHUB_ENV
          echo "::notice::PWD:     $PWD"
          echo "::notice::DST-DIR: ${dest_dir}"
          rm -rf ${dest_dir} &>/dev/null || :
          mkdir ${dest_dir}

          # We're going to need to push commits to the public
          # asterisk repo so we'll tell git to use the github
          # auth mechanism so we don't need to use ssh keys.

          ./asterisk-ci/scripts/create_release_artifacts.sh \
            --src-repo=./asterisk/ --dst-dir=${dest_dir} --debug \
            $( $SECURITY && echo "--security") \
            --start-tag=${start_tag} --end-tag=${end_tag} \
            --cherry-pick --alembic --changelog --commit --tag \
            --tarball --patchfile --sign

          # Determine the correct email list to send the announcement
          # to (if any).
          if ${SECURITY} ; then
            echo "ASTERISK_MAIL_LIST=${ASTERISK_MAIL_LIST_SEC}" >> $GITHUB_ENV
          elif [ "${end_tag_array[release_type]}" == "rc" ] ; then
            if ${end_tag_array[certified]} ; then
              echo "ASTERISK_MAIL_LIST=${ASTERISK_MAIL_LIST_CERT_RC}" >> $GITHUB_ENV
            else
              echo "ASTERISK_MAIL_LIST=${ASTERISK_MAIL_LIST_RC}" >> $GITHUB_ENV
            fi
          elif [ "${end_tag_array[release_type]}" == "ga" ] ; then
            if ${end_tag_array[certified]} ; then
              echo "ASTERISK_MAIL_LIST=${ASTERISK_MAIL_LIST_CERT_GA}" >> $GITHUB_ENV
            else
              echo "ASTERISK_MAIL_LIST=${ASTERISK_MAIL_LIST_GA}" >> $GITHUB_ENV
            fi
          else
            echo "::notice::Not sending release announcements"
          fi

      - name: Send Release Announcements
        if: env.ASTERISK_MAIL_LIST != ''
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{secrets.ASTERISKTEAMSA_GMAIL_ACCT}}
          password: ${{secrets.ASTERISKTEAMSA_GMAIL_TOKEN}}
          subject: Asterisk Release ${{ env.end_tag }}
          to: ${{ env.ASTERISK_MAIL_LIST }}
          from: Asterisk Development Team <asteriskteam@digium.com>
          body: "file://${{ env.dest_dir }}/ChangeLog-${{env.end_tag}}.txt"
          reply_to: no-reply@digium.com
          ignore_cert: true
          convert_markdown: false
